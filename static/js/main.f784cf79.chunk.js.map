{"version":3,"sources":["init/theme.js","init/menu.js","components/Layout.jsx","views/home/index.jsx","data/verbs.js","views/verbs/WordListItem.jsx","views/verbs/WordList.jsx","views/verbs/index.jsx","views/definition/WordCard.jsx","views/definition/index.jsx","components/VisualTimeout.jsx","views/flashcards/Game.jsx","components/Selector.jsx","views/flashcards/Setup.jsx","views/flashcards/GameResults.jsx","views/flashcards/index.jsx","views/sentences/index.jsx","App.js","index.js"],"names":["theme","createTheme","palette","type","primary","main","secondary","keys","drawerWidth","useStyles","makeStyles","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","LeftDrawerMenuLayout","props","word","useParams","classes","useTheme","React","useState","open","setOpen","handleDrawerClose","className","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Typography","variant","noWrap","path","exact","Drawer","anchor","paper","direction","Divider","List","menuItems","map","menuItem","ListItem","button","selected","event","icon","ListItemIcon","ListItemText","caption","key","children","Home","verbs","compounding","common","german","english","russian","transcription","associations","WordListItem","item","level","firstEnglishWord","split","w","trim","history","useHistory","row","alignCenter","spaced","div","grow","Button","push","col","marginBottom","bgColor","paddingTop","alignStart","toLowerCase","paddingLeft","backgroundColor","background","borderBottom","border","minWidth","ItemsList","rows","keyForItem","itemKey","Verbs","filter","setFilter","allLevels","level1","level2","level3","handleLevelSelect","useCallback","f","Object","assign","items","useMemo","data","ButtonGroup","size","justifyStart","marginTop","bullet","margin","transform","title","fontSize","pos","WordCard","Card","CardContent","Definition","params","filtered","index","findIndex","entry","nextIndex","length","prevIndex","ArrowBack","css","textTransform","transitionDuration","VisualTimeout","startTime","onTimeout","progress","setProgress","useEffect","animationId","tick","elapsed","Date","now","Math","min","window","requestAnimationFrame","cancelAnimationFrame","LinearProgress","value","choice","textAlign","lineHeight","Game","options","onEnd","words","setWords","setWord","choices","setChoices","setStartTime","localRef","useRef","nextCombo","_words","_local","local","current","next","round","random","Reflect","has","processed","sortKey","c","sorted","values","sort","sortBy","getNextCombination","timeout","clearTimeout","results","time","console","log","correct","status","gutterBottom","component","fromLanguage","tokens","toLanguage","handleChoice","formControl","selectEmpty","parseArray","text","camelToSentenceCase","optionFromNumber","Selector","uuid","id","age","name","parseOptions","innerProps","onChange","target","labelId","FormControl","InputLabel","Select","o","MenuItem","helperText","FormHelperText","formControlContainer","paddingRight","levelOptions","timeOptions","range","n","Setup","onStart","setLevel","setTime","setFromLanguage","setToLanguage","CardActions","rowContainer","GameScore","stats","onPlayAgain","entries","Flashcards","gameOptions","setGameOptions","setStats","gameStats","undefined","Sentences","App","menu","makeMenu","ThemeProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f784cf79.chunk.js","sourcesContent":["import { createTheme } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    primary: {\r\n      // Purple and green play nicely together.\r\n      main: \"#f9a825\",\r\n    },\r\n    secondary: {\r\n      // This is green.A700 as hex.\r\n      main: \"#aed581\",\r\n    },\r\n    \r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import { camelToSentenceCase } from \"@reactiff/ui-core\";\r\n\r\nconst keys = ['verbs', 'flashCards', 'sentences'];\r\n\r\nexport default function makeMenu(history) {\r\n  return keys.map(key => {\r\n    return {\r\n        key,\r\n        caption: camelToSentenceCase(key),\r\n        onClick: () => history.push(`/${key.toLowerCase()}`),\r\n        selected: false,\r\n    };\r\n  });\r\n}\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\n// router\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useParams,\r\n} from \"react-router-dom\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n}));\r\n\r\nexport default function LeftDrawerMenuLayout(props) {\r\n\r\n    const { word } = useParams();\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, open && classes.hide)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        <Switch>\r\n                            <Route path=\"/verbs\">Verbs</Route>\r\n                            <Route path=\"/flashcards\">Flash Cards</Route>\r\n                            <Route path=\"/sentences\">Sentences</Route>\r\n                            <Route path=\"/:word/:level?\">{word}</Route>\r\n                            <Route exact path=\"/\">Home</Route>\r\n                        </Switch>\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n\r\n                    {props.menuItems.map((menuItem) => (\r\n                        <ListItem\r\n                            button\r\n                            key={menuItem.key}\r\n                            selected={menuItem.selected}\r\n                            onClick={(event) => {\r\n                                menuItem.onClick(event);\r\n                                handleDrawerClose();\r\n                            }}\r\n                        >\r\n                            {\r\n                                menuItem.icon &&\r\n                                <ListItemIcon>{menuItem.icon}</ListItemIcon>\r\n                            }\r\n\r\n                            <ListItemText primary={menuItem.caption} />\r\n                        </ListItem>\r\n                    ))}\r\n\r\n                </List>\r\n                <Divider />\r\n\r\n            </Drawer>\r\n            <main\r\n                className={clsx(classes.content, {\r\n                    [classes.contentShift]: open,\r\n                })}\r\n            >\r\n                <div className={classes.drawerHeader} />\r\n                {props.children}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n","export default function Home() {\r\n\r\n    return <>\r\n        <h1>German Verbs</h1>\r\n        <p>\r\n            Get a head start on your German by learning the verbs that you already know (kinda).\r\n        </p>\r\n    </>\r\n\r\n}","const verbs = [\r\n  {\r\n    type: 1,\r\n    compounding: true,\r\n    common: false,\r\n    german: \"haben\",\r\n    english: \"to have\",\r\n    russian: \"иметь\",\r\n    transcription: \"хабн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: true,\r\n    common: false,\r\n    german: \"können\",\r\n    english: \"can, to be able to\",\r\n    russian: \"уметь\",\r\n    transcription: \"кёнен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: true,\r\n    common: false,\r\n    german: \"müssen\",\r\n    english: \"must, to have to\",\r\n    russian: \"быть должным сделать ч.л.\",\r\n    transcription: \"мюсн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"sagen\",\r\n    english: \"to say\",\r\n    russian: \"сказать\",\r\n    transcription: \"загн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"machen\",\r\n    english: \"to make, to do\",\r\n    russian: \"делать, сделать (действие или ч.т. руками)\",\r\n    transcription: \"махн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"geben\",\r\n    english: \"to give\",\r\n    russian: \"дать, давать\",\r\n    transcription: \"гейбн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"kommen\",\r\n    english: \"to come\",\r\n    russian: \"прийти, приходить\",\r\n    transcription: \"комен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: true,\r\n    common: false,\r\n    german: \"wollen\",\r\n    english: \"to want\",\r\n    russian: \"хотеть, желать\",\r\n    transcription: \"волен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"gehen\",\r\n    english: \"to go\",\r\n    russian: \"идти, уйти, пойти, ходить\",\r\n    transcription: \"гейен \",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"wissen\",\r\n    english: \"to know\",\r\n    russian: \"знать\",\r\n    transcription: \"виссен\",\r\n    associations: \"Wise, визирь (знающий советник)\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"sehen\",\r\n    english: \"to see\",\r\n    russian: \"видеть\",\r\n    transcription: \"зейен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: true,\r\n    common: false,\r\n    german: \"lassen\",\r\n    english: \"to let, allow\",\r\n    russian: \"Оставить как есть, дать чему то быть (пусть будет)\",\r\n    transcription: \"лассен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: true,\r\n    german: \"stehen\",\r\n    english: \"to stand\",\r\n    russian: \"Стоять (* важный корень во многих словообразованиях)\",\r\n    transcription: \"штейен\",\r\n    associations: \"Штей ~ Стой\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"finden\",\r\n    english: \"to find\",\r\n    russian: \"Найти\",\r\n    transcription: \"финден\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"liegen\",\r\n    english: \"to lie, be lying\",\r\n    russian: \"Лежать\",\r\n    transcription: \"лиген\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"denken\",\r\n    english: \"to think\",\r\n    russian: \"Думать\",\r\n    transcription: \"денкен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"tun\",\r\n    english: \"to do\",\r\n    russian: \"Делать (действие но не предмет)\",\r\n    transcription: \"тун\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"halten\",\r\n    english: \"to stop, hold\",\r\n    russian: \"Остановить(ся), держать\",\r\n    transcription: \"хальтен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: true,\r\n    german: \"sprechen\",\r\n    english: \"to speak\",\r\n    russian: \"Говорить\",\r\n    transcription: \"шпрехен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"bringen\",\r\n    english: \"to bring, take\",\r\n    russian: \"Принести\",\r\n    transcription: \"бринген\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"leben\",\r\n    english: \"to live\",\r\n    russian: \"Жить (о жизни, быть живым)\",\r\n    transcription: \"лейбн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"kennen\",\r\n    english: \"to know\",\r\n    russian: \"Знать\",\r\n    transcription: \"кеннен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"arbeiten\",\r\n    english: \"to work\",\r\n    russian: \"Работать\",\r\n    transcription: \"аабайтн\",\r\n    associations: \"Гаст арбайтер (гость работник)\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"folgen\",\r\n    english: \"to follow\",\r\n    russian: \"Следовать\",\r\n    transcription: \"фольген\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"lernen\",\r\n    english: \"to learn\",\r\n    russian: \"Учить (урок), учиться ч.л.\",\r\n    transcription: \"леанен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"verstehen\",\r\n    english: \"to understand\",\r\n    russian: \"Понимать\",\r\n    transcription: \"ферштейен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: true,\r\n    german: \"setzen\",\r\n    english: \"to set, put, place\",\r\n    russian: \"Положить, поставить (ч.т. к.т.)\",\r\n    transcription: \"зетсен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: true,\r\n    common: false,\r\n    german: \"beginnen\",\r\n    english: \"to begin\",\r\n    russian: \"Начинать\",\r\n    transcription: \"бегиннен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"schreiben\",\r\n    english: \"to write\",\r\n    russian: \"Писать (письмо)\",\r\n    transcription: \"шрайбен\",\r\n    associations: \"schreib > scribe > subscribe\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"sitzen\",\r\n    english: \"to sit\",\r\n    russian: \"Сидеть\",\r\n    transcription: \"зитсен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"scheinen\",\r\n    english: \"to shine, seem\",\r\n    russian: \"Сиять, казаться, смотреться, выглядеть\",\r\n    transcription: \"щайнен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"fallen\",\r\n    english: \"to fall\",\r\n    russian: \"Упасть, падать\",\r\n    transcription: \"фален\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"legen\",\r\n    english: \"to lay, put\",\r\n    russian: \"Положить, лечь\",\r\n    transcription: \"лейген\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"handeln\",\r\n    english: \"to deal, trade, handle\",\r\n    russian: \"Обращаться, иметь дело с ч.л. к.л.\",\r\n    transcription: \"хандельн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"reden\",\r\n    english: \"to talk\",\r\n    russian: \"Произносить речь\",\r\n    transcription: \"рейден\",\r\n    associations: \"Рейд ~ Речь > толкать речь\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"warten\",\r\n    english: \"to wait\",\r\n    russian: \"Ждать\",\r\n    transcription: \"ваатен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"helfen\",\r\n    english: \"to help\",\r\n    russian: \"Помогать\",\r\n    transcription: \"хельфен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"fühlen\",\r\n    english: \"to feel\",\r\n    russian: \"Чувствовать\",\r\n    transcription: \"фюлен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"interessieren\",\r\n    english: \"to interest\",\r\n    russian: \"Интересовать (кого-то)\",\r\n    transcription: \"интерессирен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"studieren\",\r\n    english: \"to study\",\r\n    russian: \"Учиться, изучать\",\r\n    transcription: \"штудирен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 1,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"fehlen\",\r\n    english: \"to lack, be missing\",\r\n    russian: \"Быть в недостатке, отсутствовать\",\r\n    transcription: \"фейлен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: true,\r\n    common: false,\r\n    german: \"werden\",\r\n    english: \"to become\",\r\n    russian: \"Становиться\",\r\n    transcription: \"веаден\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"nehmen\",\r\n    english: \"to take\",\r\n    russian: \"Брать, взять\",\r\n    transcription: \"неймен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"glauben\",\r\n    english: \"to believe\",\r\n    russian: \"Верить\",\r\n    transcription: \"глаубен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"fragen\",\r\n    english: \"to ask\",\r\n    russian: \"Спросить\",\r\n    transcription: \"фраген\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: true,\r\n    german: \"stellen\",\r\n    english: \"to place, set\",\r\n    russian: \"Поставить (* частый корень)\",\r\n    transcription: \"штеллен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"spielen\",\r\n    english: \"to play\",\r\n    russian: \"Играть\",\r\n    transcription: \"шпилен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: true,\r\n    common: false,\r\n    german: \"brauchen\",\r\n    english: \"to need\",\r\n    russian: \"Нуждаться\",\r\n    transcription: \"браухн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"laufen,\",\r\n    english: \"to run\",\r\n    russian: \"Бегать, работать (о технике и транспорте)\",\r\n    transcription: \"лауфн,\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"ziehen\",\r\n    english: \"to pull, move\",\r\n    russian: \"Тянуть\",\r\n    transcription: \"цийен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"treffen\",\r\n    english: \"to meet\",\r\n    russian: \"Встречать, встретиться\",\r\n    transcription: \"треффен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"suchen\",\r\n    english: \"to search, look for\",\r\n    russian: \"Искать\",\r\n    transcription: \"зухн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"tragen\",\r\n    english: \"to carry, wear\",\r\n    russian: \"Носить (одежду), нести сумку\",\r\n    transcription: \"трагн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"lesen\",\r\n    english: \"to read\",\r\n    russian: \"Читать\",\r\n    transcription: \"лейзен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"wohnen\",\r\n    english: \"to live\",\r\n    russian: \"Жить (о месте жительства)\",\r\n    transcription: \"вонен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 2,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"gleichen\",\r\n    english: \"to be similar to\",\r\n    russian: \"Быть похожим, походить\",\r\n    transcription: \"гляйхен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"bestehen\",\r\n    english: \"to exist, insist, pass (an exam)\",\r\n    russian: \"Существовать, настоять на ч.л., пройти (трудности или экзамен)\",\r\n    transcription: \"бештейен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: true,\r\n    common: false,\r\n    german: \"versuchen\",\r\n    english: \"to try, attempt\",\r\n    russian: \"Попробовать\",\r\n    transcription: \"ферзухн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"erklären\",\r\n    english: \"to explain\",\r\n    russian: \"Уточнить, обьяснить\",\r\n    transcription: \"еаклерен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"entsprechen\",\r\n    english: \"to correspond\",\r\n    russian: \"Соответствовать\",\r\n    transcription: \"ентшпрехен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"entstehen\",\r\n    english: \"to originate, develop\",\r\n    russian: \"Появиться, произойти, развиться\",\r\n    transcription: \"ентштейен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"vor·stellen\",\r\n    english: \"to introduce, imagine\",\r\n    russian: \"Представить (познакомить), а т.ж. представить (вообразить)\",\r\n    transcription: \"фор·штеллен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"erkennen\",\r\n    english: \"to recognize, admit\",\r\n    russian: \"Узнать, осознать, сознаться\",\r\n    transcription: \"еакеннен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"erwarten\",\r\n    english: \"to expect\",\r\n    russian: \"Ожидать\",\r\n    transcription: \"еаваатен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"vergehen\",\r\n    english: \"to elapse; to decay\",\r\n    russian: \"Пройти (о состоянии, т.е. все пройдёт)\",\r\n    transcription: \"феагейен\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"verbinden\",\r\n    english: \"to connect, link\",\r\n    russian: \"Соединить\",\r\n    transcription: \"феабиндн\",\r\n    associations: \"\",\r\n  },\r\n  {\r\n    type: 3,\r\n    compounding: false,\r\n    common: false,\r\n    german: \"vergleichen\",\r\n    english: \"to compare\",\r\n    russian: \"Сравнивать\",\r\n    transcription: \"феаглайхен\",\r\n    associations: \"\",\r\n  },\r\n];\r\n\r\nexport default verbs;","import ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// router\r\nimport {\r\n  useHistory,\r\n} from \"react-router-dom\";\r\n\r\nimport ui from '@reactiff/ui-core';\r\n\r\n\r\nexport default function WordListItem(props) {\r\n\r\n    const { item, level } = props;\r\n\r\n    const englishWords = item.english.split(',').map(w => w.trim());\r\n    let firstEnglishWord = englishWords[0];\r\n    \r\n    const history = useHistory();\r\n\r\n    const handleWordClick = (key) => history.push(`/${key}/${level}`);\r\n\r\n    return <ListItem className=\"list-item\" alignItems=\"flex-start\">\r\n\r\n        <ListItemText\r\n            primary={<>\r\n                    <ui.row alignCenter spaced>\r\n                        <Typography variant=\"h6\" color=\"primary\">{item.german}</Typography>\r\n                        <Typography variant=\"h6\" color=\"textPrimary\">{firstEnglishWord}</Typography>\r\n                        <ui.div grow />\r\n                        <Button color=\"secondary\" onClick={() => handleWordClick(item.german)}>&rarr;</Button>\r\n                    </ui.row>\r\n\r\n                    <ui.col>\r\n\r\n                        <ui.row spaced marginBottom={1}>\r\n                            <ui.div bgColor=\"#80808080\" padding=\"0px 2px\"><small>EN</small></ui.div>\r\n                            <ui.div paddingTop={0}>\r\n                                <Typography variant=\"caption\" color=\"textSecondary\">{item.english}</Typography>\r\n                            </ui.div>\r\n                            \r\n                        </ui.row>\r\n\r\n                        <ui.row spaced alignStart>\r\n                            <ui.div bgColor=\"#80808080\" padding=\"0px 2px\"><small>RU</small></ui.div>\r\n                            <ui.div paddingTop={0}>\r\n                                <Typography variant=\"caption\" >[{item.transcription}] </Typography>\r\n                                <Typography variant=\"caption\" color=\"textSecondary\">{item.russian.toLowerCase()}</Typography>\r\n                            </ui.div>\r\n                        </ui.row>\r\n\r\n                        {\r\n                            item.associations && \r\n                            <ui.row paddingLeft={14}>\r\n                                <Typography variant=\"caption\" color=\"textSecondary\">~ {item.associations.toLowerCase()}</Typography>\r\n                            </ui.row>\r\n                        }\r\n                    </ui.col>\r\n                </>\r\n            }\r\n            \r\n        />\r\n    </ListItem>\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport WordListItem from './WordListItem';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    backgroundColor: theme.palette.background.paper,\r\n\r\n    '& .list-item': {\r\n      borderBottom: 'thin solid #80808033',\r\n    },\r\n    '& .list-item:last-child': {\r\n      border: 'none',\r\n    },\r\n\r\n    '& .MuiButton-text': {\r\n      padding: 0,\r\n      minWidth: 32,\r\n    }\r\n  },\r\n\r\n  \r\n}));\r\n\r\nexport default function ItemsList({ rows, level, keyForItem }) {\r\n  \r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      {\r\n        rows.map((item) => {\r\n          const itemKey = keyForItem(item);\r\n          return <WordListItem key={itemKey} item={item} level={level} />\r\n        })\r\n      }\r\n    </List>\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\n\r\nimport { Button, ButtonGroup, Checkbox, Typography } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport data from '../../data/verbs';\r\nimport WordList from './WordList';\r\n\r\nimport ui, { inline } from '@reactiff/ui-core';\r\nimport { useMemo } from 'react';\r\n\r\n\r\nexport default function Verbs() {\r\n    \r\n    const [filter, setFilter] = useState({\r\n        level: 1,\r\n    })\r\n\r\n    const allLevels = filter.level === 0;\r\n    const level1 = filter.level === 1;\r\n    const level2 = filter.level === 2;\r\n    const level3 = filter.level === 3;\r\n\r\n    const handleLevelSelect = useCallback(\r\n        (level) => {\r\n            setFilter(f => Object.assign({}, f, { level }));\r\n        }\r\n    );\r\n\r\n    const items = useMemo(() => {\r\n        if (filter.level === 0) return data;\r\n        return data.filter(item => item.type === filter.level)\r\n    }, [filter.level]);\r\n    \r\n    return <>\r\n\r\n        <ui.row padding={0} border=\"none solid #80808080\" spaced alignCenter>\r\n            <ui.div grow />\r\n            <ui.div>\r\n                <Typography variant=\"caption\" color=\"textSecondary\">LEVEL</Typography>\r\n            </ui.div>            \r\n            <ButtonGroup\r\n                aria-label=\"Level button group\"\r\n                size=\"small\"\r\n            >\r\n                <Button variant={ allLevels ? 'contained' : 'outlined'} color={ allLevels ? 'primary' : 'default'} onClick={() => handleLevelSelect(0)}>All</Button>\r\n                <Button variant={ level1 ? 'contained' : 'outlined'} color={ level1 ? 'primary' : 'default'} onClick={() => handleLevelSelect(1)}>1</Button>\r\n                <Button variant={ level2 ? 'contained' : 'outlined'} color={ level2 ? 'primary' : 'default'} onClick={() => handleLevelSelect(2)}>2</Button>\r\n                <Button variant={ level3 ? 'contained' : 'outlined'} color={ level3 ? 'primary' : 'default'} onClick={() => handleLevelSelect(3)}>3</Button>\r\n            </ButtonGroup>\r\n        </ui.row>    \r\n\r\n        <br />\r\n\r\n        {\r\n            filter.level === 0 &&\r\n            <ui.row justifyStart>\r\n                <Typography variant=\"caption\" color=\"primary\">All words</Typography>\r\n            </ui.row>\r\n        }\r\n\r\n        {\r\n            filter.level > 0 &&\r\n            <ui.row justifyStart>\r\n                <Typography variant=\"caption\" color=\"primary\">Level {filter.level} words</Typography>\r\n            </ui.row>\r\n        }\r\n        \r\n\r\n        <WordList \r\n            rows={items}\r\n            level={filter.level}\r\n            keyForItem={item => item.german}\r\n        />\r\n    </>\r\n}","import Card from '@material-ui/core/Card';\r\n// import CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n// import Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ui from '@reactiff/ui-core';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // minWidth: 275,\r\n    marginTop: 15,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function WordCard(props) {\r\n\r\n  const item = props.word;\r\n  const englishWords = item.english.split(',').map(w => w.trim());\r\n  let firstEnglishWord = englishWords[0];\r\n    \r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Typography className={classes.pos} color=\"textSecondary\" variant=\"caption\">\r\n          Level {item.type} \r\n        </Typography>\r\n\r\n        \r\n        <ui.row alignCenter spaced>\r\n            <Typography variant=\"h6\" color=\"primary\">{item.german}</Typography>\r\n            <Typography variant=\"h6\" color=\"textPrimary\">{firstEnglishWord}</Typography>\r\n        </ui.row>\r\n\r\n        <ui.col>\r\n\r\n            <ui.row spaced marginBottom={1}>\r\n                <ui.div bgColor=\"#80808080\" padding=\"0px 2px\"><small>EN</small></ui.div>\r\n                <ui.div paddingTop={0}>\r\n                    <Typography variant=\"caption\" color=\"textSecondary\">{item.english}</Typography>\r\n                </ui.div>\r\n                \r\n            </ui.row>\r\n\r\n            <ui.row spaced alignStart>\r\n                <ui.div bgColor=\"#80808080\" padding=\"0px 2px\"><small>RU</small></ui.div>\r\n                <ui.div paddingTop={0}>\r\n                    <Typography variant=\"caption\" >[{item.transcription}] </Typography>\r\n                    <Typography variant=\"caption\" color=\"textSecondary\">{item.russian.toLowerCase()}</Typography>\r\n                </ui.div>\r\n            </ui.row>\r\n\r\n            {\r\n                item.associations && \r\n                <ui.row paddingLeft={14}>\r\n                    <Typography variant=\"caption\" color=\"textSecondary\">~ {item.associations.toLowerCase()}</Typography>\r\n                </ui.row>\r\n            }\r\n        </ui.col>\r\n\r\n\r\n      </CardContent>\r\n\r\n      {/* <CardActions>\r\n        <Button size=\"small\">Learn More</Button>\r\n      </CardActions> */}\r\n      \r\n    </Card>\r\n  );\r\n}\r\n","import Button from '@material-ui/core/Button';\r\nimport data from '../../data/verbs';\r\n\r\n// router\r\nimport {\r\n  useHistory,\r\n  useParams,\r\n} from \"react-router-dom\";\r\n\r\nimport WordCard from './WordCard';\r\nimport { ArrowBack, ArrowForward } from '@material-ui/icons';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nimport ui from '@reactiff/ui-core';\r\nimport { useMemo } from 'react';\r\n\r\nexport default function Definition() {\r\n\r\n  const history = useHistory();\r\n\r\n  const params = useParams();\r\n  const word = params.word;\r\n  const level = +params.level;\r\n\r\n  const filtered = useMemo(() => {\r\n      if (level === 0) return data;\r\n      return data.filter(item => item.type === +level)\r\n  }, [level]);\r\n\r\n  const index = filtered.findIndex(entry => entry.german === word);\r\n  const nextIndex = (index + 1) % filtered.length;\r\n  const prevIndex = index === 0 ? filtered.length - 1 : index - 1;\r\n  \r\n\r\n  return <>\r\n  \r\n    <IconButton onClick={() => history.push(`/verbs`) } >\r\n      <ArrowBack />&nbsp;verbs\r\n    </IconButton>\r\n\r\n    <WordCard word={filtered[index]} />\r\n\r\n    <br />\r\n\r\n\r\n\r\n    <ui.row>\r\n\r\n      <Button variant=\"text\" onClick={() => history.push(`/${filtered[prevIndex].german}/${level}`) }>\r\n        <ui.row spaced alignCenter css={{textTransform: 'none'}}>\r\n          <div>&larr;</div><div>{filtered[prevIndex].german}</div>\r\n        </ui.row>\r\n      </Button>\r\n\r\n      <ui.div grow></ui.div>\r\n      \r\n      <Button variant=\"text\" onClick={() => history.push(`/${filtered[nextIndex].german}/${level}`) }>\r\n        <ui.row spaced alignCenter css={{textTransform: 'none'}}>\r\n          <div>{filtered[nextIndex].german}</div><div>&rarr;</div>\r\n        </ui.row>\r\n      </Button>\r\n\r\n    </ui.row>\r\n\r\n  </>\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 'calc(100% + 48px)',\r\n        margin: '-24px -24px 24px -24px',\r\n        '& .MuiLinearProgress-bar1Determinate': {\r\n            transitionDuration: '0s!important',\r\n        }\r\n    },\r\n});\r\n\r\nexport default function VisualTimeout({ startTime, duration, onTimeout }) {\r\n\r\n    const classes = useStyles();\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n\r\n        let animationId;\r\n\r\n        const tick = () => {\r\n\r\n            const elapsed = Date.now() - startTime;\r\n\r\n            if (elapsed >= duration) {\r\n                onTimeout();\r\n                return\r\n            }\r\n\r\n            setProgress(Math.min(100, elapsed / duration * 100))\r\n\r\n            animationId = window.requestAnimationFrame(tick);\r\n        }\r\n\r\n\r\n\r\n\r\n        tick();\r\n\r\n        return () => {\r\n            if (animationId) {\r\n                window.cancelAnimationFrame(animationId);\r\n            }\r\n        }\r\n\r\n    }, [startTime]);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LinearProgress\r\n                variant=\"determinate\"\r\n                color=\"primary\"\r\n                value={progress}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { useRef } from \"react\";\r\n\r\nimport data from '../../data/verbs';\r\n\r\nimport ui, { sortBy } from '@reactiff/ui-core';\r\nimport { useCallback } from \"react\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { classes } from \"istanbul-lib-coverage\";\r\nimport VisualTimeout from \"../../components/VisualTimeout\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    choice: {\r\n        display: 'block',\r\n        width: '100%',\r\n        textAlign: 'left',\r\n        marginBottom: theme.spacing(1),\r\n        lineHeight: 3,\r\n    },\r\n}));\r\n\r\n\r\nconst NUMBER_OF_CHOICES = 4;\r\n\r\nfunction getNextCombination(words, local) {\r\n    let word;\r\n    // random unseen word\r\n    do {\r\n        const index = Math.round(Math.random() * (words.length - 1));\r\n        word = words[index];\r\n    } while (Reflect.has(local.processed, word.german));\r\n\r\n    local.processed[word.german] = true;\r\n\r\n    const choices = { [word.german]: { sortKey: Math.random(), word } };\r\n\r\n    // fill choices with unique random options\r\n    do {\r\n        const index = Math.round(Math.random() * (words.length - 1));\r\n        const c = words[index];\r\n        if (!Reflect.has(choices, c.german)) {\r\n            choices[c.german] = { sortKey: Math.random(), word: c };\r\n        }\r\n    } while (Object.keys(choices).length < NUMBER_OF_CHOICES);\r\n\r\n    const sorted = Object.values(choices);\r\n    sorted.sort(sortBy(c => c.sortKey));\r\n\r\n    return {\r\n        word,\r\n        choices: sorted.map(c => c.word),\r\n    }\r\n}\r\nexport default function Game({ options, onEnd }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [words, setWords] = useState();\r\n    const [word, setWord] = useState();\r\n    const [choices, setChoices] = useState();\r\n    const [startTime, setStartTime] = useState();\r\n    const localRef = useRef({});\r\n\r\n    const nextCombo = (_words, _local) => {\r\n        const local = localRef.current;\r\n\r\n        // NEED TO END THE LOOP WHEN NO MORE WORDS AVAILABLE\r\n        \r\n        const next = getNextCombination(\r\n            _words || words,\r\n            _local || local\r\n        );\r\n        setWord(next.word);\r\n        setChoices(next.choices);\r\n        setStartTime(Date.now());\r\n    };\r\n\r\n    const handleTimeout = () => {\r\n        console.log('Timeout occurred');\r\n        const local = localRef.current;\r\n        local.results.push({\r\n            word,\r\n            choices,\r\n            elapsed: options.time,\r\n            correct: false,\r\n            status: 'timed out',\r\n        });\r\n        nextCombo();\r\n    };\r\n\r\n    const handleChoice = (choice) => {\r\n        const local = localRef.current;\r\n        local.results.push({\r\n            word,\r\n            choice,\r\n            choices,\r\n            elapsed: (Date.now() - startTime) / 1000,\r\n            correct: choice.german === word.german,\r\n            status: 'selected',\r\n        });\r\n        nextCombo();\r\n    };\r\n\r\n    // effects\r\n    useEffect(() => {\r\n        const local = localRef.current;\r\n        if (local.timeout) clearTimeout(local.timeout);\r\n        local.timeout = null;\r\n        local.processed = {};\r\n        local.results = [];\r\n        const _words = options.level === 0\r\n            ? data\r\n            : data.filter(w => w.type === options.level);\r\n        setWords(_words);\r\n        nextCombo(_words, local);\r\n    }, [options, localRef]);\r\n\r\n    return <>\r\n        <VisualTimeout\r\n            startTime={startTime}\r\n            duration={options.time * 1000}\r\n            onTimeout={handleTimeout}\r\n        />\r\n        {\r\n            word &&\r\n            <Typography gutterBottom variant=\"h3\" component=\"h3\">\r\n                {word[options.fromLanguage]}\r\n            </Typography>\r\n        }\r\n\r\n        {\r\n            choices &&\r\n            choices.map(choice => {\r\n\r\n                const targetWord = choice[options.toLanguage];\r\n                const tokens = targetWord.split(',');\r\n\r\n                return (\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        className={classes.choice}\r\n                        onClick={() => handleChoice(choice)}\r\n                    >\r\n                        {tokens[0]}\r\n                    </Button>\r\n                )\r\n            })\r\n\r\n        }\r\n    </>\r\n\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { MenuItem } from '@material-ui/core';\r\n\r\nimport { v4 as uuid } from 'uuid';\r\nimport { useState } from 'react';\r\nimport { camelToSentenceCase } from '@reactiff/ui-core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    width: '100%',\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction optionFromNumber(value) {\r\n  return {\r\n    value: value,\r\n    text: value,\r\n  }\r\n}\r\n\r\nfunction optionFromString(value) {\r\n  return {\r\n    value: value,\r\n    text: camelToSentenceCase(value),\r\n  }\r\n}\r\n\r\nfunction parseArray(items) {\r\n  return items.map(item => {\r\n    if (typeof item === 'string') return optionFromString(item);\r\n    if (typeof item === 'number') return optionFromNumber(item);\r\n    return item;\r\n  })\r\n}\r\n\r\nfunction parseOptions(props) {\r\n  if (props.items) return parseArray(props.items);\r\n}\r\n\r\nexport default function Selector(props) {\r\n\r\n  const [id] = useState(uuid());\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    age: '',\r\n    name: 'hai',\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    props.onChange && props.onChange(event.target.value);\r\n  };\r\n\r\n  const options = parseOptions(props);\r\n\r\n  const innerProps = {\r\n    id,\r\n    value: props.value,\r\n    onChange: handleChange,\r\n  };\r\n\r\n  if (props.caption) {\r\n    innerProps.labelId = id + '-label';\r\n  }\r\n  \r\n\r\n  return (\r\n    <FormControl className={classes.formControl}>\r\n\r\n        {\r\n          props.caption && <InputLabel id={id + '-label'}>{props.caption}</InputLabel>\r\n        }\r\n        \r\n        <Select\r\n          {...innerProps}\r\n        >\r\n          {\r\n            options.map(o => {\r\n              return <MenuItem value={o.value}>{o.text}</MenuItem>;\r\n            })\r\n          }\r\n        </Select>\r\n        {\r\n          props.helperText && <FormHelperText>{props.helperText}</FormHelperText>\r\n        }\r\n      </FormControl>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport ui, { range } from '@reactiff/ui-core';\r\nimport Selector from '../../components/Selector';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: 15,\r\n    },\r\n    formControlContainer: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst levelOptions = [\r\n    { value: 0, text: 'All levels' },\r\n    { value: 1, text: 'Level 1' },\r\n    { value: 2, text: 'Level 2' },\r\n    { value: 3, text: 'Level 3' },\r\n];\r\n\r\nconst timeOptions = range(5).map(n => (\r\n    { value: n, text: `${n} seconds` }\r\n)) \r\n\r\n\r\nexport default function Setup({ onStart }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [level, setLevel] = useState(1);\r\n    const [time, setTime] = useState(3);\r\n    const [fromLanguage, setFromLanguage] = useState('german');\r\n    const [toLanguage, setToLanguage] = useState('english');\r\n\r\n    const handleStart = () => {\r\n        onStart({\r\n            fromLanguage,\r\n            toLanguage,\r\n            level,\r\n            time,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Flashcard Game\r\n                </Typography>\r\n\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    Guess each word to test your knowledge.  Faster answers give higher scores.  \r\n                </Typography>\r\n                \r\n                <br/>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    TIP: Try giving yourself less time per answer for even higher scores.\r\n                </Typography>\r\n\r\n            </CardContent>\r\n\r\n            <hr />\r\n            <br />\r\n\r\n            <ui.div className={classes.formControlContainer}>\r\n                <ui.row spaced>\r\n                    <Selector caption=\"From\" value={fromLanguage} items={'german,english,russian'.split(',')} onChange={setFromLanguage} />\r\n                    <Selector caption=\"To\" value={toLanguage} items={'german,english,russian'.split(',')} onChange={setToLanguage} />\r\n                </ui.row>\r\n            </ui.div>\r\n\r\n            <ui.div className={classes.formControlContainer}>\r\n                <ui.row spaced>\r\n                    <Selector caption=\"Level\" value={level} items={levelOptions} onChange={setLevel} />\r\n                    <Selector caption=\"Time\" value={time} items={timeOptions} onChange={setTime} />\r\n                </ui.row>\r\n            </ui.div>\r\n\r\n            <br />\r\n            <hr />\r\n\r\n            <CardActions>\r\n                <Button color=\"primary\" onClick={handleStart}>START</Button>\r\n            </CardActions>\r\n\r\n        </Card>\r\n    );\r\n}\r\n","import Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport ui, { camelToSentenceCase, range } from '@reactiff/ui-core';\r\n\r\nimport Selector from '../../components/Selector';\r\nimport { useState } from 'react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: 15,\r\n    },\r\n    rowContainer: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n}));\r\n\r\n\r\n\r\nexport default function GameScore({ stats, onPlayAgain }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Game Score\r\n                </Typography>\r\n            </CardContent>\r\n\r\n            <hr />\r\n            <br />\r\n\r\n            {\r\n                Object.entries(stats).map(entry => {\r\n\r\n                    return (\r\n                        <ui.div className={classes.rowContainer}>\r\n                            <ui.row spaced>\r\n                                <div>{camelToSentenceCase(entry.key)}</div>\r\n                                <div>{entry.value}</div>\r\n                            </ui.row>\r\n                        </ui.div>\r\n                    )\r\n                })\r\n            }\r\n\r\n            <br />\r\n            <hr />\r\n\r\n            <CardActions>\r\n                <Button color=\"primary\" onClick={onPlayAgain}>PLAY AGAIN</Button>\r\n            </CardActions>\r\n\r\n        </Card>\r\n    );\r\n}\r\n","import { useRef } from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport Game from './Game';\r\nimport Setup from './Setup';\r\nimport GameResults from './GameResults';\r\n\r\nexport default function Flashcards() {\r\n  \r\n  const [gameOptions, setGameOptions] = useState();\r\n  const [stats, setStats] = useState();\r\n\r\n  const handleEnd = (gameStats) => {\r\n    setStats(gameStats);\r\n  };\r\n\r\n  const playAgain = () => {\r\n    setStats(undefined);\r\n    setGameOptions(undefined);\r\n  };\r\n\r\n  return <>\r\n    {!stats && !gameOptions && <Setup onStart={setGameOptions} />}\r\n    {!stats && gameOptions && <Game options={gameOptions} onEnd={handleEnd} />}\r\n    {stats && <GameResults stats={stats} onPlayAgain={() => playAgain()} />}\r\n  </>\r\n}\r\n\r\n","export default function Sentences() {\r\n        \r\n    return <>\r\n      <h1>Sentences</h1>\r\n    </>\r\n}","import { useMemo } from \"react\";\n\n// mui\nimport { ThemeProvider } from \"@material-ui/styles\";\n\n// router\nimport {\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\n\n// app components\nimport theme from './init/theme';\nimport makeMenu from './init/menu';\nimport Layout from \"./components/Layout\";\n\n// views\nimport Home from \"./views/home\";\nimport Verbs from \"./views/verbs\";\nimport Definition from \"./views/definition\";\nimport Flashcards from \"./views/flashcards\";\nimport Sentences from \"./views/sentences\";\n\nfunction App() {\n\n  const history = useHistory();\n  const menu = useMemo(() => makeMenu(history), [history]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Layout menuItems={menu}>\n        \n          <Switch>\n            <Route path=\"/verbs\">\n              <Verbs />\n            </Route>\n            <Route path=\"/flashcards\">\n              <Flashcards />\n            </Route>\n            <Route path=\"/sentences\">\n              <Sentences />\n            </Route>\n            <Route path=\"/:word/:level?\">\n              <Definition />\n            </Route>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        \n      </Layout>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\n// router\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\n\nimport './css/index.css';\nimport './css/flex.css';\nimport './css/orthogonal.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}